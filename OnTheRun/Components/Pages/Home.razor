@page "/"
@using OnTheRun.GameObjects.Services

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject GameService gameService

<h3>Welcome to The Chase Game!</h3>

<div>
    <label for="name">Enter Your Name:</label>
    <input id="name" @bind="Name" @bind:event="oninput" placeholder="Your name..." />
</div>

<div>
    <label for="joinCode">Enter Join Code:</label>
    <input id="joinCode" @bind="GameId" @bind:event="oninput" placeholder="e.g., ABCD" />
</div>

<button @onclick="JoinGame" disabled="@IsJoinDisabled">Join</button>

<p>@StatusMessage</p>

@if (IsJoinDisabled)
{
    <p class="validation-error">Please fill in both fields.</p>
}

@code {
    private string Name { get; set; } = string.Empty;
    private string GameId { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;

    private bool IsJoinDisabled => string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(GameId);

    private bool _isInitialized = false;


    private async Task JoinGame()
    {
        if (string.IsNullOrWhiteSpace(GameId) || string.IsNullOrWhiteSpace(Name))
        {
            StatusMessage = "Please fill out both fields.";
            return;
        }

        try
        {
            if (gameService.IsValidGameId(GameId))
            {
                await JS.InvokeVoidAsync("setCookie", "Name", Name);
                await JS.InvokeVoidAsync("setCookie", "GameId", GameId);

                gameService.JoinGame(GameId, Name);
                NavigationManager.NavigateTo("/Lobby");
            }
            else
            {
                StatusMessage = "Invalid join code!";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
    }
}
