@page "/"

@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<h3>Welcome to The Chase Game!</h3>

<div>
    <label for="name">Enter Your Name:</label>
    <input id="name" @bind="Name" @bind:event="oninput" placeholder="Your name..." />
</div>

<div>
    <label for="joinCode">Enter Join Code:</label>
    <input id="joinCode" @bind="JoinCode" @bind:event="oninput" placeholder="e.g., ABCD" />
</div>

<button @onclick="JoinGame" disabled="@IsJoinDisabled">Join</button>

<p>@StatusMessage</p>

@if (IsJoinDisabled)
{
    <p class="validation-error">Please fill in both fields.</p>
}

@code {
    private string Name { get; set; } = string.Empty;
    private string JoinCode { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;

    private bool IsJoinDisabled => string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(JoinCode);

    private IJSObjectReference? _hubConnection;
    private bool _isInitialized = false;


    // This should probably be changed in the future. A signalR connection is established with anyone that vists the home page. Likely performance & security risk
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isInitialized)
        {
            try
            {
                _hubConnection = await JS.InvokeAsync<IJSObjectReference>("startConnection", "/gamehub");
                _isInitialized = true;
            }
            catch (Exception ex)
            {
                StatusMessage = $"Error initializing SignalR: {ex.Message}";
            }
        }
    }

    private static Home? Instance;


    protected override void OnInitialized()
    {
        Instance = this;
    }

    [JSInvokable]
    public static void OnPlayerJoined(string player)
    {
        if (Instance != null)
        {
            Instance.StatusMessage = $"{player} has joined the game!";
            Instance.InvokeAsync(Instance.StateHasChanged); // Update UI
        }
    }

    private async Task JoinGame()
    {
        if (string.IsNullOrWhiteSpace(JoinCode) || string.IsNullOrWhiteSpace(Name))
        {
            StatusMessage = "Please fill out both fields.";
            return;
        }

        try
        {
            // Call the JavaScript function `invokeHubMethod` to invoke the SignalR hub method
            await JS.InvokeVoidAsync("invokeHubMethod", "JoinGame", JoinCode, Name);
            StatusMessage = "Successfully joined the game!";
            NavigationManager.NavigateTo($"/Lobby?joinCode={Uri.EscapeDataString(JoinCode)}&name={Uri.EscapeDataString(Name)}");
        }
        catch (Exception ex)
        {
            StatusMessage = $"Error: {ex.Message}";
        }
    }
}
